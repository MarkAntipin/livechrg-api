  name: ci

  on:
    pull_request:
      branches: [ master ]

    push:
      branches: [ ci ]

  jobs:
    ci:
      runs-on: ubuntu-latest

#      services:
#        postgres:
#          image: postgres
#          env:
#            POSTGRES_USER: livechrg-api
#            POSTGRES_PASSWORD: livechrg-api
#            POSTGRES_DB: livechrg-api
#          ports:
#            - 5437:5432
#          options:
#            --health-cmd pg_isready
#            --health-interval 10s
#            --health-timeout 5s
#            --health-retries 5

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Install PostGIS
          run: |
            PG_VERSION=$(apt list --installed | grep -E 'postgresql-[0-9.]+' | sed -rn 's/.*postgresql-([0-9.]+).*/\1/p')
            [[ "$PG_VERSION" =~ ^[0-9.]+$ ]] || (echo "Failed to detect Postgres version" && exit 1)
            echo "Detected PostgreSQL version: $PG_VERSION"
            REPO_URL="https://apt.postgresql.org/pub/repos/apt/"
            wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /usr/share/keyrings/postgresql.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/postgresql.gpg] $REPO_URL $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list >/dev/null
            sudo apt update
            sudo apt-get install postgresql-$PG_VERSION-postgis-3
          shell: bash

        - name: Prerequisites
          run: echo "$(pg_config --bindir)" >> $GITHUB_PATH
          shell: bash

#        - name: Setup and start PostgreSQL
#          run: |
#            export PGDATA="$RUNNER_TEMP/pgdata"
#            pg_ctl init --options="--encoding=UTF-8 --locale=en_US.UTF-8"
#
#            # Forbid creating unix sockets since they are created by default in the
#            # directory we don't have permissions to.
#            echo "unix_socket_directories = ''" >> "$PGDATA/postgresql.conf"
#            echo "port = ${{ inputs.port }}" >> "$PGDATA/postgresql.conf"
#            pg_ctl start
#
#            # Both PGHOST and PGUSER are used by PostgreSQL tooling such as 'psql'
#            # or 'createuser'. Since PostgreSQL data has been re-setup, we cannot
#            # rely on defaults anymore.
#            #
#            # PGHOST is required for Linux and macOS since they default to unix
#            # sockets, and we have turned them off.
#            echo "PGHOST=localhost" >> $GITHUB_ENV
#            echo "PGUSER=livechrg-api" >> $GITHUB_ENV
#            echo "PGPORT=5437" >> $GITHUB_ENV
#            echo "PGDATABASE=livechrg-api" >> $GITHUB_ENV
#            echo "PGPASSWORD=livechrg-api" >> $GITHUB_ENV
#          shell: bash

        - name: Add PostGIS to PostgreSQL database
          run: psql -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          shell: bash

        - name: Install golang-migrate
          run: |
            curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz;
            sudo mv migrate /usr/bin/migrate;
            which migrate

        - name: Apply migrations
          run: migrate -path ./migrations -database "postgres://livechrg-api:livechrg-api@localhost:5437/livechrg-api?sslmode=disable" up
          env:
            POSTGRES_USER: livechrg-api
            POSTGRES_PASSWORD: livechrg-api
            POSTGRES_PORT: 5437
            POSTGRES_DB: livechrg-api

        - name: Set up python
          uses: actions/setup-python@v4
          with:
            python-version: '3.11'

        - name: Install poetry
          uses: snok/install-poetry@v1

        - name: Install dependencies
          run: poetry install --no-interaction --no-root

        - name: Run linter
          run: poetry run ruff check .

        - name: Run unit tests
          run: poetry run pytest -v tests

        - name: Run functional tests
          run: poetry run pytest -v tests_functional