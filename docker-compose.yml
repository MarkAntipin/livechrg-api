version: "3.9"

services:
  api:
    image: livechrg-api
    ports:
      - "8080:8080"
    networks:
      - api_network
    environment:
      PG_HOST: pg
      PG_PORT: 5432
      PG_USER: livechrg-api
      PG_PASSWORD: livechrg-api  # change on production
      PG_DATABASE: livechrg-api
      ADMIN_AUTH_TOKEN: token  # change on production
    depends_on:
      pg:
        condition: service_started
      migrate:
        condition: service_completed_successfully

  migrate:
    image: migrate/migrate
    networks:
      - api_network
    volumes:
      - ./migrations:/migrations
    command: [
      "-path",
      "/migrations",
      "-database",
      "postgres://livechrg-api:livechrg-api@pg:5432/livechrg-api?sslmode=disable",
      "up"
    ]   # change on production
    depends_on:
      pg:
        condition: service_healthy

  pg:
    image: postgis/postgis:14-3.3-alpine
    ports:
      - "5433:5432"
    networks:
      - api_network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: livechrg-api
      POSTGRES_PASSWORD: livechrg-api  # change on production
      POSTGRES_DB: livechrg-api
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U livechrg-api" ]
      interval: 5s
      timeout: 5s
      retries: 3

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    restart: always
    environment:
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      - elasticsearch
    image: docker.elastic.co/kibana/kibana:8.13.2
    container_name: kibana
    volumes:
      - kibana-data:/usr/share/kibana/data
    ports:
      - 5601:5601
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

networks:
    api_network:

volumes:
  postgres-data:
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local