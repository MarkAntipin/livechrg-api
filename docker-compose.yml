version: "3.9"

services:
  api:
    image: livechrg-api
    ports:
      - "8080:8080"
    links:
      - fluentd
    networks:
      - api_network
    environment:
      PG_HOST: pg
      PG_PORT: 5432
      PG_USER: livechrg-api
      PG_PASSWORD: livechrg-api  # change on production
      PG_DATABASE: livechrg-api
      ADMIN_AUTH_TOKEN: token  # change on production
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        fluentd-async: "true"
        tag: httpd.access
    depends_on:
      pg:
        condition: service_started
      migrate:
        condition: service_completed_successfully

  migrate:
    image: migrate/migrate
    networks:
      - api_network
    volumes:
      - ./migrations:/migrations
    command: [
      "-path",
      "/migrations",
      "-database",
      "postgres://livechrg-api:livechrg-api@pg:5432/livechrg-api?sslmode=disable",
      "up"
    ]   # change on production
    depends_on:
      pg:
        condition: service_healthy

  pg:
    image: postgis/postgis:14-3.3-alpine
    ports:
      - "5433:5432"
    networks:
      - api_network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: livechrg-api
      POSTGRES_PASSWORD: livechrg-api  # change on production
      POSTGRES_DB: livechrg-api
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U livechrg-api" ]
      interval: 5s
      timeout: 5s
      retries: 3

#  web:
#    image: httpd
#    ports:
#      - "80:80"
#    links:
#      - fluentd
#    logging:
#      driver: "fluentd"
#      options:
#        fluentd-address: localhost:24224
#        tag: httpd.access

  fluentd:
      build: ./fluentd
      volumes:
        - ./fluentd/conf:/fluentd/etc
      links:
        - "elasticsearch"
      ports:
        - "24224:24224"
        - "24224:24224/udp"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
    expose:
      - "9200"
    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    links:
      - "elasticsearch"
    ports:
      - "5601:5601"

networks:
    api_network:

volumes:
  postgres-data: